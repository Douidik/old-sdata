#ifndef SDATA_REGEX_GRAPHVIZ_HPP
#define SDATA_REGEX_GRAPHVIZ_HPP

#include <iostream>

namespace sdata {

struct RegexNode;
class RegexAutomata;

class RegexGraphviz {
  constexpr static std::string_view CREDITS =
      "# Regex graph autogenerated by https://github.com/douidik/sdata \n"
      "# <$>: epsilon state \n"
      "# <^>: any state \n"
      "#Â <_>: empty \n"
      "# <?>: non-printable state \n";

 public:
  RegexGraphviz(const RegexAutomata &automata) : m_automata(automata) {}
  std::ostream &stream(std::ostream &os) const;

 private:
  std::string_view parse_state(RegexNode *node) const;

  std::ostream &stream_start(std::ostream &os) const;
  std::ostream &stream_shapes(std::ostream &os) const;
  std::ostream &stream_edges(std::ostream &os) const;

  const RegexAutomata &m_automata;
};

inline std::ostream &operator<<(std::ostream &os, const RegexAutomata &automata) {
  return RegexGraphviz{automata}.stream(os);
}

}  // namespace sdata

#endif
